# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Enrollment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, reference_id: str=None, name: str=None, images: int=None, key_values: KeyValues=None):  # noqa: E501
        """Enrollment - a model defined in Swagger

        :param reference_id: The reference_id of this Enrollment.  # noqa: E501
        :type reference_id: str
        :param name: The name of this Enrollment.  # noqa: E501
        :type name: str
        :param images: The images of this Enrollment.  # noqa: E501
        :type images: int
        :param key_values: The key_values of this Enrollment.  # noqa: E501
        :type key_values: KeyValues
        """
        self.swagger_types = {
            'reference_id': str,
            'name': str,
            'images': int,
            'key_values': KeyValues
        }

        self.attribute_map = {
            'reference_id': 'reference_id',
            'name': 'name',
            'images': 'images',
            'key_values': 'key_values'
        }

        self._reference_id = reference_id
        self._name = name
        self._images = images
        self._key_values = key_values

    @classmethod
    def from_dict(cls, dikt) -> 'Enrollment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Enrollment of this Enrollment.  # noqa: E501
        :rtype: Enrollment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reference_id(self) -> str:
        """Gets the reference_id of this Enrollment.

        reference id of the enrollment in the face recognition system  # noqa: E501

        :return: The reference_id of this Enrollment.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id: str):
        """Sets the reference_id of this Enrollment.

        reference id of the enrollment in the face recognition system  # noqa: E501

        :param reference_id: The reference_id of this Enrollment.
        :type reference_id: str
        """
        if reference_id is None:
            raise ValueError("Invalid value for `reference_id`, must not be `None`")  # noqa: E501

        self._reference_id = reference_id

    @property
    def name(self) -> str:
        """Gets the name of this Enrollment.

        name of person enrolled  # noqa: E501

        :return: The name of this Enrollment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Enrollment.

        name of person enrolled  # noqa: E501

        :param name: The name of this Enrollment.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def images(self) -> int:
        """Gets the images of this Enrollment.

        number of images associated with the person enrolled  # noqa: E501

        :return: The images of this Enrollment.
        :rtype: int
        """
        return self._images

    @images.setter
    def images(self, images: int):
        """Sets the images of this Enrollment.

        number of images associated with the person enrolled  # noqa: E501

        :param images: The images of this Enrollment.
        :type images: int
        """

        self._images = images

    @property
    def key_values(self) -> KeyValues:
        """Gets the key_values of this Enrollment.


        :return: The key_values of this Enrollment.
        :rtype: KeyValues
        """
        return self._key_values

    @key_values.setter
    def key_values(self, key_values: KeyValues):
        """Sets the key_values of this Enrollment.


        :param key_values: The key_values of this Enrollment.
        :type key_values: KeyValues
        """

        self._key_values = key_values
